"""
TOS (ÂØπË±°Â≠òÂÇ®) Êñá‰ª∂‰∏ä‰º†Ë∑ØÁî±
Êèê‰æõÊñá‰ª∂‰∏ä‰º†Âà∞ÁÅ´Â±±ÂºïÊìéTOSÁöÑHTTPÊé•Âè£
"""
from fastapi import APIRouter, HTTPException, UploadFile, File, Form
from pydantic import BaseModel
from typing import Optional
import httpx
import hashlib
import os
from datetime import datetime
from signature_v4 import SignatureV4
import tos

router = APIRouter()


@router.get("/api/tos/status")
async def check_tos_status():
    """Ê£ÄÊü•TOS‰∏ä‰º†ÊúçÂä°Áä∂ÊÄÅ"""
    return {
        "status": "ok",
        "service": "TOS Upload Service",
        "version": "1.0.0"
    }


class TOSUploadResponse(BaseModel):
    """TOS‰∏ä‰º†ÂìçÂ∫î"""
    success: bool
    url: Optional[str] = None
    error: Optional[str] = None


async def upload_to_tos(
    file_data: bytes,
    file_name: str,
    bucket: str,
    region: str,
    access_key_id: str,
    secret_access_key: str
) -> dict:
    """
    ‰∏ä‰º†Êñá‰ª∂Âà∞TOS
    
    Args:
        file_data: Êñá‰ª∂‰∫åËøõÂà∂Êï∞ÊçÆ
        file_name: Êñá‰ª∂Âêç
        bucket: TOS BucketÂêçÁß∞
        region: TOSÂå∫Âüü
        access_key_id: ËÆøÈóÆÂØÜÈí•ID
        secret_access_key: ËÆøÈóÆÂØÜÈí•ÂØÜÈí•
        
    Returns:
        ÂåÖÂê´‰∏ä‰º†ÁªìÊûúÁöÑÂ≠óÂÖ∏
    """
    try:
        # ÁîüÊàêÊñá‰ª∂ÁöÑÂîØ‰∏ÄË∑ØÂæÑÔºà‰ΩøÁî®Êó∂Èó¥Êà≥ÂíåÊñá‰ª∂ÂêçÔºâ
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        file_hash = hashlib.md5(file_data[:1024]).hexdigest()[:8]
        file_ext = os.path.splitext(file_name)[1]
        object_key = f"uploads/{timestamp}_{file_hash}{file_ext}"
        
        # ÊûÑÂª∫TOS URL
        host = f"{bucket}.tos-{region}.volces.com"
        url = f"https://{host}/{object_key}"
        
        # ‰ΩøÁî®ÂÆòÊñπ TOS SDK
        auth = tos.auth.Auth(access_key_id, secret_access_key, region)
        client = tos.TosClient(
            auth=auth,
            endpoint=f"https://tos-{region}.volces.com"
        )
        
        # ‰∏ä‰º†Êñá‰ª∂
        response = client.put_object(
            Bucket=bucket,
            Key=object_key,
            Body=file_data,
            ContentType='application/octet-stream'
        )
        
        # TOS SDK ÊàêÂäü‰∏ä‰º†‰ºöËøîÂõû PutObjectResult ÂØπË±°
        if response:
            return {
                'success': True,
                'url': url
            }
        else:
            return {
                'success': False,
                'error': "‰∏ä‰º†Â§±Ë¥•"
            }
                
    except Exception as e:
        return {
            'success': False,
            'error': f"‰∏ä‰º†ÂºÇÂ∏∏: {str(e)}"
        }


@router.post("/api/tos/upload", response_model=TOSUploadResponse)
async def upload_file(
    file: UploadFile = File(...),
    bucket: str = Form(...),
    region: str = Form(...),
    access_key_id: str = Form(...),
    secret_access_key: str = Form(...)
):
    """
    ‰∏ä‰º†Êñá‰ª∂Âà∞TOS
    
    ËØ∑Ê±ÇÂèÇÊï∞:
    - file: Ë¶Å‰∏ä‰º†ÁöÑÊñá‰ª∂
    - bucket: TOS BucketÂêçÁß∞
    - region: TOSÂå∫Âüü (Â¶Ç: cn-beijing)
    - access_key_id: ËÆøÈóÆÂØÜÈí•ID
    - secret_access_key: ËÆøÈóÆÂØÜÈí•ÂØÜÈí•
    
    ËøîÂõû:
    - success: ÊòØÂê¶ÊàêÂäü
    - url: Êñá‰ª∂ÁöÑTOS URL (ÊàêÂäüÊó∂)
    - error: ÈîôËØØ‰ø°ÊÅØ (Â§±Ë¥•Êó∂)
    """
    try:
        print(f"üì• Êî∂Âà∞TOS‰∏ä‰º†ËØ∑Ê±Ç:")
        print(f"  - Êñá‰ª∂Âêç: {file.filename}")
        print(f"  - ÂÜÖÂÆπÁ±ªÂûã: {file.content_type}")
        print(f"  - Bucket: {bucket}")
        print(f"  - Region: {region}")
        print(f"  - Access Key ID: {access_key_id[:10]}...{access_key_id[-4:] if len(access_key_id) > 14 else ''}")
        print(f"  - Secret Key: {'*' * 20}")
        # ËØªÂèñÊñá‰ª∂Êï∞ÊçÆ
        file_data = await file.read()
        
        # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞èÔºàÈôêÂà∂‰∏∫100MBÔºâ
        if len(file_data) > 100 * 1024 * 1024:
            raise HTTPException(status_code=413, detail="Êñá‰ª∂Â§ßÂ∞èË∂ÖËøá100MBÈôêÂà∂")
        
        # ‰∏ä‰º†Âà∞TOS
        result = await upload_to_tos(
            file_data=file_data,
            file_name=file.filename,
            bucket=bucket,
            region=region,
            access_key_id=access_key_id,
            secret_access_key=secret_access_key
        )
        
        if not result['success']:
            raise HTTPException(status_code=500, detail=result['error'])
        
        return TOSUploadResponse(
            success=True,
            url=result['url']
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•: {str(e)}")

